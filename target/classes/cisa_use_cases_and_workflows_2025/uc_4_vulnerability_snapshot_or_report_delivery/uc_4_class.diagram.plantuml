@startuml
	title Class Diagram - Vulnerability Snapshot or Report Delivery
	
	' Actors
	class "CISACustomer" {
	  +requestSnapshot()
	}
	
	class "Tier3Analyst" {
	  +openHelpDeskRequest()
	  +exploreDataset()
	  +createAnalytic()
	  +generateVisualization()
	  +handOffTicket()
	  +archiveArtifacts()
	}
	
	class "ProductionStaff" {
	  +triageTicket()
	  +completeWorkflow()
	  +closeTicket()
	  +collectFeedback()
	  +createNewTicket()
	}
	
	' Core domain classes
	class "VulnerabilitySnapshot" {
	  +quarterly: Boolean
	  +contains: DataSet[]
	  +generate()
	}
	
	class "DataSet" {
	  +source: String
	  +profile: String
	  +normalized: Boolean
	  +mapFields()
	  +ingest()
	}
	
	class "ServiceNowTicket" {
	  +id: String
	  +status: String
	  +create()
	  +close()
	}
	
	class "AnalyticNotebook" {
	  +correlationLogic: String
	  +execute()
	}
	
	class "Visualization" {
	  +tool: String
	  +render()
	}
	
	class "AnalyticKnowledgeBase" {
	  +storeArtifact()
	  +retrieveArtifact()
	}
	
	class "DataEngineer" {
	  +mapFieldsToOCSF()
	  +normalizeData()
	  +ingestData()
	}
	
	class "UnityCatalog" {
	  +registerDataSet()
	}
	
	class "Databricks" {
	  +runAnalytic()
	}
	
	class "Kibana" {
	  +createVisualization()
	}
	
	' Relationships
	CISACustomer --> VulnerabilitySnapshot : expects
	VulnerabilitySnapshot --> DataSet : includes
	Tier3Analyst --> ServiceNowTicket : works on
	Tier3Analyst --> DataSet : explores
	Tier3Analyst --> AnalyticNotebook : creates
	Tier3Analyst --> Visualization : creates
	Tier3Analyst --> AnalyticKnowledgeBase : archives
	Tier3Analyst --> Databricks : uses
	Tier3Analyst --> Kibana : uses
	Tier3Analyst --> UnityCatalog : uses
	
	ProductionStaff --> ServiceNowTicket : triages
	ProductionStaff --> VulnerabilitySnapshot : publishes
	ProductionStaff --> CISACustomer : collectsFeedback
	
	DataEngineer --> DataSet : processes
	
	ServiceNowTicket --> VulnerabilitySnapshot : tracks
	AnalyticKnowledgeBase --> VulnerabilitySnapshot : storesArtifacts

@enduml
